@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<p>
    This sample demonstrates silent authentication in a Microsoft Teams tab.
</p>
<p>
    The tab will try to get an id token for the user silently, validate the token and show the profile information decoded from the token.
    The "Login" button will appear only if silent authentication failed.
</p>

<!-- Login button -->
<button id="btnLogin" onclick="login()" style="display: none">Login to Azure AD</button>

<!-- Result -->
<p>
    <div id="divError" style="display: none"></div>
    <div id="divProfile" style="display: none">
        <div><b>Name:</b> <span id="profileDisplayName" /></div>
        <div><b>UPN:</b> <span id="profileUpn" /></div>
        <div><b>Object id:</b> <span id="profileObjectId" /></div>
    </div>
    <div style="height: 50px">
    </div>
    <div id="divSilentSignOut" style="display: none">
        <button onclick="SilentLogout()">Sign Out</button>
    </div>
</p>
<script src="https://statics.teams.cdn.office.net/sdk/v1.6.0/js/MicrosoftTeams.min.js" integrity="sha384-SNENyRfvDvybst1u0LawETYF6L5yMx5Ya1dIqWoG4UDTZ/5UAMB15h37ktdBbyFh" crossorigin="anonymous"></script>
<script src="https://secure.aadcdn.microsoftonline-p.com/lib/1.0.17/js/adal.min.js" integrity="sha384-BIOS/65fbAsb2XiCCSTlZSTTl0ZgqkOU522dpyk5meOnN2EOQ3uH+QpqEtoAtmBn" crossorigin="anonymous"></script>
<script type="text/javascript">
        microsoftTeams.initialize();

        // ADAL.js configuration
        let config = {
            clientId: '@ViewBag.ClientId',
            redirectUri: window.location.origin + "/SilentAuthEnd",       // This should be in the list of redirect uris for the AAD app
            cacheLocation: "localStorage",
            navigateToLoginRequestUrl: false,
        };

        //localStorage.setItem("Client", config.clientId)
        let upn = undefined;
        microsoftTeams.getContext(function (context) {
            upn = context.upn;
            loadData(upn);
        });

        // Loads data for the given user
        function loadData(upn) {
            // Setup extra query parameters for ADAL
            // - openid and profile scope adds profile information to the id_token
            // - login_hint provides the expected user name
            if (upn) {
                config.extraQueryParameters = "scope=openid+profile&login_hint=" + encodeURIComponent(upn);
            } else {
                config.extraQueryParameters = "scope=openid+profile";
            }

            let authContext = new AuthenticationContext(config);

            // See if there's a cached user and it matches the expected user
            let user = authContext.getCachedUser();
            if (user) {
                if (user.userName !== upn) {
                    // User doesn't match, clear the cache
                    authContext.clearCache();
                }
            }

            // Get the id token (which is the access token for resource = clientId)
            let token = authContext.getCachedToken(config.clientId);
            if (token) {
                showProfileInformation(token);
            } else {
                // No token, or token is expired
                authContext._renewIdToken(function (err, idToken) {
                    if (err) {
                        console.log("Renewal failed: " + err);

                        // Failed to get the token silently; show the login button
                        $("#btnLogin").css({ display: "" });

                        // You could attempt to launch the login popup here, but in browsers this could be blocked by
                        // a popup blocker, in which case the login attempt will fail with the reason FailedToOpenWindow.
                    } else {
                        showProfileInformation(idToken);
                    }
                });
            }
        }

        // Login to Azure AD
        function login() {
            $("#divError").text("").css({ display: "none" });
            $("#divProfile").css({ display: "none" });
            $("#divSilentSignOut").css({ display: "none" });


            microsoftTeams.authentication.authenticate({
                url: window.location.origin + "/SilentAuthStart",
                width: 600,
                height: 535,
                successCallback: function (result) {
                    // AuthenticationContext is a singleton
                    let authContext = new AuthenticationContext();
                    let idToken = authContext.getCachedToken(config.clientId);
                    if (idToken) {
                        showProfileInformation(idToken);
                    } else {
                        console.error("Error getting cached id token. This should never happen.");
                        // At this point we have to get the user involved, so show the login button
                        $("#btnLogin").css({ display: "" });
                    };
                },
                failureCallback: function (reason) {
                    console.log("Login failed: " + reason);
                    if (reason === "CancelledByUser" || reason === "FailedToOpenWindow") {
                        console.log("Login was blocked by popup blocker or canceled by user.");
                    }
                    // At this point we have to get the user involved, so show the login button
                    $("#btnLogin").css({ display: "" });

                    $("#divError").text(reason).css({ display: "" });
                    $("#divProfile").css({ display: "none" });
                    $("#divSilentSignOut").css({ display: "none" });
                }
            });
        }

        // Get the user's profile information from the id token
        function showProfileInformation(idToken) {
            $.ajax({
                url: window.location.origin + "/Home/ValidateToken?validToken=" + idToken,
                beforeSend: function (request) {
                    request.setRequestHeader("Authorization", "Bearer " + idToken);
                },
                success: function (token) {
                    var token = JSON.parse(token);
                    $("#profileDisplayName").text(token.name);
                    $("#profileUpn").text(token.upn);
                    $("#profileObjectId").text(token.oid);
                    $("#divProfile").css({ display: "" });
                    $("#divSilentSignOut").css({ display: "" });
                    $("#divError").css({ display: "none" });
                    microsoftTeams.settings.setValidityState(true);

                    localStorage.setItem("displayName", token.name);

                },
                error: function (xhr, textStatus, errorThrown) {
                    console.log("textStatus: " + textStatus + ", errorThrown:" + errorThrown);
                    $("#divError").text(errorThrown).css({ display: "" });
                    $("#divProfile").css({ display: "none" });
                    $("#divSilentSignOut").css({ display: "none" });
                },
            });
        }

        microsoftTeams.initialize();
        microsoftTeams.settings.registerOnSaveHandler(function (saveEvent) {
            var radios = document.getElementsByName('notificationType');

            microsoftTeams.settings.setSettings({
                entityId: 'Silent Authentication',
                contentUrl: window.location.origin + "/Home/Index",
                configName: 'SilentAuthentication'
            });
            saveEvent.notifySuccess();
        });

    function SilentLogout() {
	    localStorage.clear();
        window.location.href = "@Url.Action("ChooseAuth", "Home")";
    }

    
</script>

