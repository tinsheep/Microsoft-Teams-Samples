<!DOCTYPE html>
<html lang="en">
<head>
    <head>
        <script src="https://statics.teams.cdn.office.net/sdk/v1.10.0/js/MicrosoftTeams.min.js" integrity="sha384-6oUzHUqESdbT3hNPDDZUa/OunUj5SoxuMXNek1Dwe6AmChzqc6EJhjVrJ93DY/Bv" crossorigin="anonymous"></script></script>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
        <script src="./scripts/auth-delegated.js"></script>
        <meta charset="UTF-8">
        <meta http-equiv="Content-Security-Policy"
            content="default-src *; style-src 'self' 'unsafe-inline' http://localhost:3978; script-src 'self' 'unsafe-inline' 'unsafe-eval'">
    </head>
    <style>
        #mainDiv {
            padding-left: 10%;
            padding-top: 2%;
        }
    </style>
</head>
<body id=mainDiv>
    <div>
        <div class="radioClass">
            <label><input type="radio" name="notificationRadio" value="sendNotificationChannel" checked> Send
                Notification To
                User in Channel</label></br>
            <label><input type="radio" name="notificationRadio" value="customTopicNotificationChannel"> Send
                Notification with Custom Topic in Channel</label></br>
            <label><input type="radio" name="notificationRadio" value="notificationChannelTab"> Notify User about a
                channel Tab</label>
        </div></br>
        <div class="sendNotificationChannel desc">
            <div class="mb">
                <div class="form-group fg">
                    <label for="title" class="title">Task Title</label>
                    </br>
                    <input type="text" id="taskTitle" name="taskTitle">
                </div>
                <div class="form-group fg">
                    </br>
                    <label for="title-desc" class="description">Task Description</label>
                    </br>
                    <input type="text" id="taskDescription" name="taskDescription">
                </div>
            </div>
            <div class="modal-footer mf">
                </br>
                <button type="button" class="btn-send save" onclick="return sendNotificationToChannel()">Send
                    Notification to Channel</button>
            </div>
        </div>
        <div class="customTopicNotificationChannel desc">
            <div class="mb">
                <div class="form-group fg">
                    <label for="DeployementTitle" class="DeployementTitle">Deployment Title</label>
                    </br>
                    <input type="text" id="DeployementTitle" name="DeployementTitle">
                </div>
                <div class="form-group fg">
                    </br>
                    <label for="deployment-desc" class="DeploymentDescription">Deployment Description</label>
                    </br>
                    <input type="text" id="DeploymentDescription" name="DeploymentDescription">
                </div>
            </div>
            <div class="modal-footer mf">
                </br>
                <button type="button" class="btn-send save" onclick="return customTopicTeamNotification()">Notify with
                    Custom Topic in Channel</button>
            </div>
        </div>
        <div class="notificationChannelTab desc">
            <div class="mb">
                <div class="form-group fg">
                    </br>
                    <label for="reservationId" class="reservationId">ID</label>
                    </br>
                    <input type="text" id="reservationId" name="reservationId">
                </div>
                <div class="form-group fg">
                    </br>
                    <label for="reservationTitle" class="reservationTitle">Reservation Title</label>
                    </br>
                    <input type="text" id="reservationTitle" name="reservationTitle">
                </div>
                <div class="form-group fg">
                    </br>
                    <label for="currentSlot-desc" class="currentSlot">Current Slot</label>
                    </br>
                    <input type="text" id="currentSlot" name="currentSlot">
                </div>
            </div>
            <div class="modal-footer mf">
                </br>
                <button type="button" class="btn-send save" onclick="return channelTabTeamNotification()">Notify User
                    for channel Tab</button>
            </div>
        </div>
    </div>
    <script>
        // application level permission token.
        var token =  <%-token%>
            $(document).ready(function () {
                $(".customTopicNotificationChannel").hide();
                $(".notificationChannelTab").hide();
                $('input[type="radio"]').click(function () {
                    var inputValue = $(this).attr("value");
                    var targetBox = $("." + inputValue);
                    $(".desc").not(targetBox).hide();
                    $(targetBox).show();
                });
            });
        microsoftTeams.initialize();
        var delegatedtoken = localStorage.getItem("accessToken");
        var empty = true;
        $('input[type="text"]').each(function () {
            if ($(this).val() != "") {
                empty = false;
                return false;
            }
        });

        // send notification to channel in a team for task creation.
        function sendNotificationToChannel() {
            var isValid = true;
            $('#taskTitle,#taskDescription').each(function (e) {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                        "background": ""
                    });
                }
            });
            if (isValid == false) {
                e.preventDefault();
                return false;
            }
            var action = "EntityTopic";
            let taskInfo = {
                title: $('#taskTitle').val(),
                description: $('#taskDescription').val(),
                taskInfoAction: action,
            };
            microsoftTeams.getContext(function (context) {
                var userId = context.userObjectId;
                var teamId = context.groupId;

                const postData = {
                    "topic": {
                        "source": "entityUrl",
                        "value": "https://graph.microsoft.com/v1.0/teams/" + teamId
                    },
                    "activityType": "pendingFinanceApprovalRequests",
                    "previewText": {
                        "content": "Internal spending team has a pending finance approval requests"
                    },
                    "recipient": {
                        "@odata.type": "microsoft.graph.aadUserNotificationRecipient",
                        "userId": userId
                    },
                    "templateParameters": [
                        {
                            "name": "pendingRequestCount",
                            "value": taskInfo.title
                        }
                    ]
                };
                $.ajax({
                    url: "https://graph.microsoft.com/v1.0/teams/" + teamId + "/sendActivityNotification",
                    type: "POST",
                    data: JSON.stringify(postData),
                    headers: {
                        Accept: 'application/json',
                        'Content-Type': 'application/json',
                    },
                    beforeSend: function (request) {
                        request.setRequestHeader("Authorization", "Bearer " + token);
                    },
                    success: function (profile) {
                        console.log(profile);
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log("textStatus: " + textStatus + ", errorThrown:" + errorThrown);
                    },
                });
            });
        };

        // send notification for channel tab.
        function channelTabTeamNotification() {
            var isValid = true;
            $('#reservationId,#reservationTitle,#currentSlot').each(function (e) {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                        "background": ""
                    });
                }
            });
            if (isValid == false) {
                e.preventDefault();
                return false;
            }
            var action = "channelTab";
            let taskInfo = {
                id: $('#reservationId').val(),
                title: $('#reservationTitle').val(),
                currentSlot: $('#currentSlot').val(),
                taskInfoAction: action,
            };
            microsoftTeams.getContext(function (context) {
                var userId = context.userObjectId;
                var teamId = context.groupId;
                var channelId = context.channelId;
                var taburl;
                $.ajax({
                    url: "https://graph.microsoft.com/v1.0/teams/" + teamId + "/channels/" + channelId + "/tabs?$expand=teamsApp",
                    type: "GET",
                    beforeSend: function (request) {
                        request.setRequestHeader("Authorization", "Bearer " + token);
                    },
                    success: function (profile) {
                        taburl = getTabURL(profile);
                        getNotificationToChannelTab(taburl, token, teamId, taskInfo, userId, channelId);
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log("textStatus: " + textStatus + ", errorThrown:" + errorThrown);
                    },
                });
            });
        }

        // Get notification to channel tab.
        function getNotificationToChannelTab(tabId, token, teamId, taskInfo, userId, channelId) {
            const postData = {
                "topic": {
                    "source": "entityUrl",
                    "value": "https://graph.microsoft.com/v1.0/teams/" + teamId + "/channels/" + channelId + "/tabs/" + tabId
                },
                "activityType": "reservationUpdated",
                "previewText": {
                    "content": "You have moved up the queue"
                },
                "recipient": {
                    "@odata.type": "microsoft.graph.aadUserNotificationRecipient",
                    "userId": userId
                },
                "templateParameters": [
                    {
                        "name": "reservationId",
                        "value": taskInfo.id
                    },
                    {
                        "name": "currentSlot",
                        "value": taskInfo.currentSlot
                    }
                ]
            };
            $.ajax({
                url: "https://graph.microsoft.com/v1.0/teams/" + teamId + "/sendActivityNotification",
                type: "POST",
                data: JSON.stringify(postData),
                headers: {
                    Accept: 'application/json',
                    'Content-Type': 'application/json',
                },
                beforeSend: function (request) {
                    request.setRequestHeader("Authorization", "Bearer " + token);
                },
                success: function (profile) {
                    console.log(profile);
                },
                error: function (xhr, textStatus, errorThrown) {
                    console.log("textStatus: " + textStatus + ", errorThrown:" + errorThrown);
                },
            });
        }

        // Get tab Url.
        function getTabURL(appList) {
            list = appList.value;
            var i = 0;
            for (i = 0; i < list.length; i++) {
                if (list[i].teamsApp['displayName'] == "NotifyFeedApp") {
                    return list[i].id;
                }
            }
        }

        // Send notification for custom topic in team.
        function customTopicTeamNotification() {
            var isValid = true;
            $('#DeployementTitle,#DeployementDescription').each(function (e) {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                        "background": ""
                    });
                }
            });
            if (isValid == false) {
                e.preventDefault();
                return false;
            }
            var action = "customTopic";
            let taskInfo = {
                title: $('#DeployementTitle').val(),
                description: $('#DeployementDescription').val(),
                taskInfoAction: action,
            };
            microsoftTeams.getContext(function (context) {
                var userId = context.userObjectId;
                var teamId = context.groupId;
                var channelId = context.channelId;

                const message = {
                    "body": {
                        "content": "New Deployment :" + taskInfo.title
                    }
                };
                $.ajax({
                    url: "https://graph.microsoft.com/v1.0/teams/" + teamId + "/channels/" + channelId + "/messages",
                    type: "POST",
                    data: JSON.stringify(message),
                    headers: {
                        Accept: 'application/json',
                        'Content-Type': 'application/json',
                    },
                    beforeSend: function (request) {
                        request.setRequestHeader("Authorization", "Bearer " + delegatedtoken);
                    },
                    success: function (response) {
                        getChannelNotification(userId, taskInfo, teamId, token, response.webUrl);
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log("textStatus: " + textStatus + ", errorThrown: chat" + errorThrown);
                    },
                });
            });
        };

        // Get channel notification for custom topic.
        function getChannelNotification(userId, taskInfo, teamId, token, webUrl) {
            const postData = {
                "topic": {
                    "source": "text",
                    "value": "Deployment Approvals Channel",
                    "webUrl": webUrl,
                },
                "activityType": "deploymentApprovalRequired",
                "previewText": {
                    "content": "New deployment requires your approval"
                },
                "recipient": {
                    "@odata.type": "microsoft.graph.aadUserNotificationRecipient",
                    "userId": userId
                },
                "templateParameters": [
                    {
                        "name": "deploymentId",
                        "value": taskInfo.title
                    }
                ]
            };
            $.ajax({
                url: "https://graph.microsoft.com/v1.0/teams/" + teamId + "/sendActivityNotification",
                type: "POST",
                data: JSON.stringify(postData),
                headers: {
                    Accept: 'application/json',
                    'Content-Type': 'application/json',
                },
                beforeSend: function (request) {
                    request.setRequestHeader("Authorization", "Bearer " + token);
                },
                success: function (profile) {
                    console.log(profile);
                },
                error: function (xhr, textStatus, errorThrown) {
                    console.log("textStatus: " + textStatus + ", errorThrown:" + errorThrown);
                },
            });
        }
    </script>
</body>
</html>